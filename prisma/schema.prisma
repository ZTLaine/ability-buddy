// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?   
  email          String?   @unique 
  emailVerified  DateTime? 
  hashedPassword String?
  image          String?   
  role           UserRole  @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[] 
  sessions Session[] 
  resources Resource[]
  likes     Like[]
}

enum UserRole {
  USER
  ADMIN
}

model Resource {
  id          String    @id @default(cuid())
  title       String
  description String    @db.Text
  mediaUrls   Json?     
  bodySystems Json?
  userId      String
  author      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  tags        ResourceTag[]
  likes       Like[]
  // purchaseOrAcquisitionInfo - consider how to model this: separate model or fields?
  // For now, let's assume simple string fields can be added here later or a Json field.
  externalLink String?
  creationInstructions String? @db.Text
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique // Ensures tags are unique
  resources ResourceTag[]
}

// Join table for many-to-many relationship between Resources and Tags
model ResourceTag {
  resourceId String
  tagId      String
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  assignedAt DateTime @default(now())

  @@id([resourceId, tagId])
}

model Like {
  id         String   @id @default(cuid())
  resourceId String
  userId     String
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([resourceId, userId]) // User can like a resource only once
}

// NextAuth.js specific models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
} 